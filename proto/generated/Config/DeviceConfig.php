<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

namespace Config;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Configuration
 *
 * Generated from protobuf message <code>Config.DeviceConfig</code>
 */
class DeviceConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Sets the role of node
     *
     * Generated from protobuf field <code>.Config.DeviceConfig.Role role = 1;</code>
     */
    protected $role = 0;
    /**
     * Disabling this will disable the SerialConsole by not initilizing the StreamAPI
     *
     * Generated from protobuf field <code>bool serial_enabled = 2;</code>
     */
    protected $serial_enabled = false;
    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Set this to true to leave the debug log outputting even when API is active.
     *
     * Generated from protobuf field <code>bool debug_log_enabled = 3;</code>
     */
    protected $debug_log_enabled = false;
    /**
     * For boards without a hard wired button, this is the pin number that will be used
     * Boards that have more than one button can swap the function with this one. defaults to BUTTON_PIN if defined.
     *
     * Generated from protobuf field <code>uint32 button_gpio = 4;</code>
     */
    protected $button_gpio = 0;
    /**
     * For boards without a PWM buzzer, this is the pin number that will be used
     * Defaults to PIN_BUZZER if defined.
     *
     * Generated from protobuf field <code>uint32 buzzer_gpio = 5;</code>
     */
    protected $buzzer_gpio = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $role
     *           Sets the role of node
     *     @type bool $serial_enabled
     *           Disabling this will disable the SerialConsole by not initilizing the StreamAPI
     *     @type bool $debug_log_enabled
     *           By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     *           Set this to true to leave the debug log outputting even when API is active.
     *     @type int $button_gpio
     *           For boards without a hard wired button, this is the pin number that will be used
     *           Boards that have more than one button can swap the function with this one. defaults to BUTTON_PIN if defined.
     *     @type int $buzzer_gpio
     *           For boards without a PWM buzzer, this is the pin number that will be used
     *           Defaults to PIN_BUZZER if defined.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Config::initOnce();
        parent::__construct($data);
    }

    /**
     * Sets the role of node
     *
     * Generated from protobuf field <code>.Config.DeviceConfig.Role role = 1;</code>
     * @return int
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * Sets the role of node
     *
     * Generated from protobuf field <code>.Config.DeviceConfig.Role role = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkEnum($var, \Config\DeviceConfig\Role::class);
        $this->role = $var;

        return $this;
    }

    /**
     * Disabling this will disable the SerialConsole by not initilizing the StreamAPI
     *
     * Generated from protobuf field <code>bool serial_enabled = 2;</code>
     * @return bool
     */
    public function getSerialEnabled()
    {
        return $this->serial_enabled;
    }

    /**
     * Disabling this will disable the SerialConsole by not initilizing the StreamAPI
     *
     * Generated from protobuf field <code>bool serial_enabled = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setSerialEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->serial_enabled = $var;

        return $this;
    }

    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Set this to true to leave the debug log outputting even when API is active.
     *
     * Generated from protobuf field <code>bool debug_log_enabled = 3;</code>
     * @return bool
     */
    public function getDebugLogEnabled()
    {
        return $this->debug_log_enabled;
    }

    /**
     * By default we turn off logging as soon as an API client connects (to keep shared serial link quiet).
     * Set this to true to leave the debug log outputting even when API is active.
     *
     * Generated from protobuf field <code>bool debug_log_enabled = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setDebugLogEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->debug_log_enabled = $var;

        return $this;
    }

    /**
     * For boards without a hard wired button, this is the pin number that will be used
     * Boards that have more than one button can swap the function with this one. defaults to BUTTON_PIN if defined.
     *
     * Generated from protobuf field <code>uint32 button_gpio = 4;</code>
     * @return int
     */
    public function getButtonGpio()
    {
        return $this->button_gpio;
    }

    /**
     * For boards without a hard wired button, this is the pin number that will be used
     * Boards that have more than one button can swap the function with this one. defaults to BUTTON_PIN if defined.
     *
     * Generated from protobuf field <code>uint32 button_gpio = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setButtonGpio($var)
    {
        GPBUtil::checkUint32($var);
        $this->button_gpio = $var;

        return $this;
    }

    /**
     * For boards without a PWM buzzer, this is the pin number that will be used
     * Defaults to PIN_BUZZER if defined.
     *
     * Generated from protobuf field <code>uint32 buzzer_gpio = 5;</code>
     * @return int
     */
    public function getBuzzerGpio()
    {
        return $this->buzzer_gpio;
    }

    /**
     * For boards without a PWM buzzer, this is the pin number that will be used
     * Defaults to PIN_BUZZER if defined.
     *
     * Generated from protobuf field <code>uint32 buzzer_gpio = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setBuzzerGpio($var)
    {
        GPBUtil::checkUint32($var);
        $this->buzzer_gpio = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(DeviceConfig::class, \Config_DeviceConfig::class);

