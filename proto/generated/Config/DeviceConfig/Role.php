<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

namespace Config\DeviceConfig;

use UnexpectedValueException;

/**
 * Defines the device's role on the Mesh network
 *
 * Protobuf type <code>Config.DeviceConfig.Role</code>
 */
class Role
{
    /**
     * Client device role
     *
     * Generated from protobuf enum <code>CLIENT = 0;</code>
     */
    const CLIENT = 0;
    /**
     * Client Mute device role
     *   Same as a client except packets will not hop over this node, does not contribute to routing packets for mesh.
     *
     * Generated from protobuf enum <code>CLIENT_MUTE = 1;</code>
     */
    const CLIENT_MUTE = 1;
    /**
     * Router device role.
     *   Mesh packets will prefer to be routed over this node. This node will not be used by client apps. 
     *   The wifi/ble radios and the oled screen will be put to sleep.
     *
     * Generated from protobuf enum <code>ROUTER = 2;</code>
     */
    const ROUTER = 2;
    /**
     * Router Client device role
     *   Mesh packets will prefer to be routed over this node. The Router Client can be used as both a Router and an app connected Client.
     *
     * Generated from protobuf enum <code>ROUTER_CLIENT = 3;</code>
     */
    const ROUTER_CLIENT = 3;

    private static $valueToName = [
        self::CLIENT => 'CLIENT',
        self::CLIENT_MUTE => 'CLIENT_MUTE',
        self::ROUTER => 'ROUTER',
        self::ROUTER_CLIENT => 'ROUTER_CLIENT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Role::class, \Config_DeviceConfig_Role::class);

