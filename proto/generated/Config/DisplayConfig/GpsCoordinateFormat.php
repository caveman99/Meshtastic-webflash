<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

namespace Config\DisplayConfig;

use UnexpectedValueException;

/**
 * How the GPS coordinates are displayed on the OLED screen.
 *
 * Protobuf type <code>Config.DisplayConfig.GpsCoordinateFormat</code>
 */
class GpsCoordinateFormat
{
    /**
     * GPS coordinates are displayed in the normal decimal degrees format:
     * DD.DDDDDD DDD.DDDDDD
     *
     * Generated from protobuf enum <code>DEC = 0;</code>
     */
    const DEC = 0;
    /**
     * GPS coordinates are displayed in the degrees minutes seconds format:
     * DD°MM'SS"C DDD°MM'SS"C, where C is the compass point representing the locations quadrant
     *
     * Generated from protobuf enum <code>DMS = 1;</code>
     */
    const DMS = 1;
    /**
     * Universal Transverse Mercator format:
     * ZZB EEEEEE NNNNNNN, where Z is zone, B is band, E is easting, N is northing
     *
     * Generated from protobuf enum <code>UTM = 2;</code>
     */
    const UTM = 2;
    /**
     * Military Grid Reference System format:
     * ZZB CD EEEEE NNNNN, where Z is zone, B is band, C is the east 100k square, D is the north 100k square,
     * E is easting, N is northing
     *
     * Generated from protobuf enum <code>MGRS = 3;</code>
     */
    const MGRS = 3;
    /**
     * Open Location Code (aka Plus Codes).
     *
     * Generated from protobuf enum <code>OLC = 4;</code>
     */
    const OLC = 4;
    /**
     * Ordnance Survey Grid Reference (the National Grid System of the UK).
     * Format: AB EEEEE NNNNN, where A is the east 100k square, B is the north 100k square,
     * E is the easting, N is the northing
     *
     * Generated from protobuf enum <code>OSGR = 5;</code>
     */
    const OSGR = 5;

    private static $valueToName = [
        self::DEC => 'DEC',
        self::DMS => 'DMS',
        self::UTM => 'UTM',
        self::MGRS => 'MGRS',
        self::OLC => 'OLC',
        self::OSGR => 'OSGR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(GpsCoordinateFormat::class, \Config_DisplayConfig_GpsCoordinateFormat::class);

