<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

namespace Config\DisplayConfig;

use UnexpectedValueException;

/**
 * Override OLED outo detect with this if it fails.
 *
 * Protobuf type <code>Config.DisplayConfig.OledType</code>
 */
class OledType
{
    /**
     * Default / Auto
     *
     * Generated from protobuf enum <code>OLED_AUTO = 0;</code>
     */
    const OLED_AUTO = 0;
    /**
     * Default / Auto
     *
     * Generated from protobuf enum <code>OLED_SSD1306 = 1;</code>
     */
    const OLED_SSD1306 = 1;
    /**
     * Default / Auto
     *
     * Generated from protobuf enum <code>OLED_SH1106 = 2;</code>
     */
    const OLED_SH1106 = 2;

    private static $valueToName = [
        self::OLED_AUTO => 'OLED_AUTO',
        self::OLED_SSD1306 => 'OLED_SSD1306',
        self::OLED_SH1106 => 'OLED_SH1106',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(OledType::class, \Config_DisplayConfig_OledType::class);

