<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

namespace Config\PositionConfig;

use UnexpectedValueException;

/**
 * Bit field of boolean configuration options, indicating which optional
 *   fields to include when assembling POSITION messages
 * Longitude and latitude are always included (also time if GPS-synced)
 * NOTE: the more fields are included, the larger the message will be -
 *   leading to longer airtime and a higher risk of packet loss
 *
 * Protobuf type <code>Config.PositionConfig.PositionFlags</code>
 */
class PositionFlags
{
    /**
     * Required for compilation
     *
     * Generated from protobuf enum <code>UNSET = 0;</code>
     */
    const PBUNSET = 0;
    /**
     * Include an altitude value (if available)
     *
     * Generated from protobuf enum <code>ALTITUDE = 1;</code>
     */
    const ALTITUDE = 1;
    /**
     * Altitude value is MSL
     *
     * Generated from protobuf enum <code>ALTITUDE_MSL = 2;</code>
     */
    const ALTITUDE_MSL = 2;
    /**
     * Include geoidal separation
     *
     * Generated from protobuf enum <code>GEOIDAL_SEPARATION = 4;</code>
     */
    const GEOIDAL_SEPARATION = 4;
    /**
     * Include the DOP value ; PDOP used by default, see below
     *
     * Generated from protobuf enum <code>DOP = 8;</code>
     */
    const DOP = 8;
    /**
     * If POS_DOP set, send separate HDOP / VDOP values instead of PDOP
     *
     * Generated from protobuf enum <code>HVDOP = 16;</code>
     */
    const HVDOP = 16;
    /**
     * Include number of "satellites in view"
     *
     * Generated from protobuf enum <code>SATINVIEW = 32;</code>
     */
    const SATINVIEW = 32;
    /**
     * Include a sequence number incremented per packet
     *
     * Generated from protobuf enum <code>SEQ_NO = 64;</code>
     */
    const SEQ_NO = 64;
    /**
     * Include positional timestamp (from GPS solution)
     *
     * Generated from protobuf enum <code>TIMESTAMP = 128;</code>
     */
    const TIMESTAMP = 128;
    /**
     * Include positional heading
     * Intended for use with vehicle not walking speeds
     * walking speeds are likely to be error prone like the compass
     *
     * Generated from protobuf enum <code>HEADING = 256;</code>
     */
    const HEADING = 256;
    /**
     * Include positional speed
     * Intended for use with vehicle not walking speeds
     * walking speeds are likely to be error prone like the compass
     *
     * Generated from protobuf enum <code>SPEED = 512;</code>
     */
    const SPEED = 512;

    private static $valueToName = [
        self::PBUNSET => 'UNSET',
        self::ALTITUDE => 'ALTITUDE',
        self::ALTITUDE_MSL => 'ALTITUDE_MSL',
        self::GEOIDAL_SEPARATION => 'GEOIDAL_SEPARATION',
        self::DOP => 'DOP',
        self::HVDOP => 'HVDOP',
        self::SATINVIEW => 'SATINVIEW',
        self::SEQ_NO => 'SEQ_NO',
        self::TIMESTAMP => 'TIMESTAMP',
        self::HEADING => 'HEADING',
        self::SPEED => 'SPEED',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(PositionFlags::class, \Config_PositionConfig_PositionFlags::class);

