<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: storeforward.proto

namespace StoreAndForward;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * TODO: REPLACE
 *
 * Generated from protobuf message <code>StoreAndForward.Statistics</code>
 */
class Statistics extends \Google\Protobuf\Internal\Message
{
    /**
     * Number of messages we have ever seen
     *
     * Generated from protobuf field <code>uint32 messages_total = 1;</code>
     */
    protected $messages_total = 0;
    /**
     * Number of messages we have currently saved our history.
     *
     * Generated from protobuf field <code>uint32 messages_saved = 2;</code>
     */
    protected $messages_saved = 0;
    /**
     * Maximum number of messages we will save
     *
     * Generated from protobuf field <code>uint32 messages_max = 3;</code>
     */
    protected $messages_max = 0;
    /**
     * Router uptime in seconds
     *
     * Generated from protobuf field <code>uint32 up_time = 4;</code>
     */
    protected $up_time = 0;
    /**
     * Number of times any client sent a request to the S&F.
     *
     * Generated from protobuf field <code>uint32 requests = 5;</code>
     */
    protected $requests = 0;
    /**
     * Number of times the history was requested.
     *
     * Generated from protobuf field <code>uint32 requests_history = 6;</code>
     */
    protected $requests_history = 0;
    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>bool heartbeat = 7;</code>
     */
    protected $heartbeat = false;
    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_max = 8;</code>
     */
    protected $return_max = 0;
    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_window = 9;</code>
     */
    protected $return_window = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $messages_total
     *           Number of messages we have ever seen
     *     @type int $messages_saved
     *           Number of messages we have currently saved our history.
     *     @type int $messages_max
     *           Maximum number of messages we will save
     *     @type int $up_time
     *           Router uptime in seconds
     *     @type int $requests
     *           Number of times any client sent a request to the S&F.
     *     @type int $requests_history
     *           Number of times the history was requested.
     *     @type bool $heartbeat
     *           Is the heartbeat enabled on the server?
     *     @type int $return_max
     *           Is the heartbeat enabled on the server?
     *     @type int $return_window
     *           Is the heartbeat enabled on the server?
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Storeforward::initOnce();
        parent::__construct($data);
    }

    /**
     * Number of messages we have ever seen
     *
     * Generated from protobuf field <code>uint32 messages_total = 1;</code>
     * @return int
     */
    public function getMessagesTotal()
    {
        return $this->messages_total;
    }

    /**
     * Number of messages we have ever seen
     *
     * Generated from protobuf field <code>uint32 messages_total = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setMessagesTotal($var)
    {
        GPBUtil::checkUint32($var);
        $this->messages_total = $var;

        return $this;
    }

    /**
     * Number of messages we have currently saved our history.
     *
     * Generated from protobuf field <code>uint32 messages_saved = 2;</code>
     * @return int
     */
    public function getMessagesSaved()
    {
        return $this->messages_saved;
    }

    /**
     * Number of messages we have currently saved our history.
     *
     * Generated from protobuf field <code>uint32 messages_saved = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setMessagesSaved($var)
    {
        GPBUtil::checkUint32($var);
        $this->messages_saved = $var;

        return $this;
    }

    /**
     * Maximum number of messages we will save
     *
     * Generated from protobuf field <code>uint32 messages_max = 3;</code>
     * @return int
     */
    public function getMessagesMax()
    {
        return $this->messages_max;
    }

    /**
     * Maximum number of messages we will save
     *
     * Generated from protobuf field <code>uint32 messages_max = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMessagesMax($var)
    {
        GPBUtil::checkUint32($var);
        $this->messages_max = $var;

        return $this;
    }

    /**
     * Router uptime in seconds
     *
     * Generated from protobuf field <code>uint32 up_time = 4;</code>
     * @return int
     */
    public function getUpTime()
    {
        return $this->up_time;
    }

    /**
     * Router uptime in seconds
     *
     * Generated from protobuf field <code>uint32 up_time = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setUpTime($var)
    {
        GPBUtil::checkUint32($var);
        $this->up_time = $var;

        return $this;
    }

    /**
     * Number of times any client sent a request to the S&F.
     *
     * Generated from protobuf field <code>uint32 requests = 5;</code>
     * @return int
     */
    public function getRequests()
    {
        return $this->requests;
    }

    /**
     * Number of times any client sent a request to the S&F.
     *
     * Generated from protobuf field <code>uint32 requests = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setRequests($var)
    {
        GPBUtil::checkUint32($var);
        $this->requests = $var;

        return $this;
    }

    /**
     * Number of times the history was requested.
     *
     * Generated from protobuf field <code>uint32 requests_history = 6;</code>
     * @return int
     */
    public function getRequestsHistory()
    {
        return $this->requests_history;
    }

    /**
     * Number of times the history was requested.
     *
     * Generated from protobuf field <code>uint32 requests_history = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setRequestsHistory($var)
    {
        GPBUtil::checkUint32($var);
        $this->requests_history = $var;

        return $this;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>bool heartbeat = 7;</code>
     * @return bool
     */
    public function getHeartbeat()
    {
        return $this->heartbeat;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>bool heartbeat = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setHeartbeat($var)
    {
        GPBUtil::checkBool($var);
        $this->heartbeat = $var;

        return $this;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_max = 8;</code>
     * @return int
     */
    public function getReturnMax()
    {
        return $this->return_max;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_max = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setReturnMax($var)
    {
        GPBUtil::checkUint32($var);
        $this->return_max = $var;

        return $this;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_window = 9;</code>
     * @return int
     */
    public function getReturnWindow()
    {
        return $this->return_window;
    }

    /**
     * Is the heartbeat enabled on the server?
     *
     * Generated from protobuf field <code>uint32 return_window = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setReturnWindow($var)
    {
        GPBUtil::checkUint32($var);
        $this->return_window = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Statistics::class, \StoreAndForward_Statistics::class);

