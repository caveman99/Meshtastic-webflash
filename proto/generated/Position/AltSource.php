<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mesh.proto

namespace Position;

use UnexpectedValueException;

/**
 * How the altitude was acquired: manual, GPS int/ext, etc
 * Default: same as location_source if present
 *
 * Protobuf type <code>Position.AltSource</code>
 */
class AltSource
{
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf enum <code>ALT_UNSET = 0;</code>
     */
    const ALT_UNSET = 0;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf enum <code>ALT_MANUAL = 1;</code>
     */
    const ALT_MANUAL = 1;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf enum <code>ALT_INTERNAL = 2;</code>
     */
    const ALT_INTERNAL = 2;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf enum <code>ALT_EXTERNAL = 3;</code>
     */
    const ALT_EXTERNAL = 3;
    /**
     * TODO: REPLACE
     *
     * Generated from protobuf enum <code>ALT_BAROMETRIC = 4;</code>
     */
    const ALT_BAROMETRIC = 4;

    private static $valueToName = [
        self::ALT_UNSET => 'ALT_UNSET',
        self::ALT_MANUAL => 'ALT_MANUAL',
        self::ALT_INTERNAL => 'ALT_INTERNAL',
        self::ALT_EXTERNAL => 'ALT_EXTERNAL',
        self::ALT_BAROMETRIC => 'ALT_BAROMETRIC',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(AltSource::class, \Position_AltSource::class);

