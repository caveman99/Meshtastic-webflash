<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: config.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *
 * Display Config
 *
 * Generated from protobuf message <code>Config.DisplayConfig</code>
 */
class Config_DisplayConfig extends \Google\Protobuf\Internal\Message
{
    /**
     *
     * Number of seconds the screen stays on after pressing the user button or receiving a message
     * 0 for default of one minute MAXUINT for always on
     *
     * Generated from protobuf field <code>uint32 screen_on_secs = 1;</code>
     */
    private $screen_on_secs = 0;
    /**
     *
     * How the GPS coordinates are formatted on the OLED screen.
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2;</code>
     */
    private $gps_format = 0;
    /**
     *
     * Automatically toggles to the next page on the screen like a carousel, based the specified interval in seconds.
     * Potentially useful for devices without user buttons.
     *
     * Generated from protobuf field <code>uint32 auto_screen_carousel_secs = 3;</code>
     */
    private $auto_screen_carousel_secs = 0;
    /**
     *
     * If this is set, the displayed compass will always point north. if unset, the old behaviour 
     * (top of display is heading direction) is used.
     *
     * Generated from protobuf field <code>bool compass_north_top = 4;</code>
     */
    private $compass_north_top = false;
    /**
     *
     * Flip screen vertically, for cases that mount the screen upside down
     *
     * Generated from protobuf field <code>bool flip_screen = 5;</code>
     */
    private $flip_screen = false;
    /**
     *
     * Perferred display units
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.DisplayUnits units = 6;</code>
     */
    private $units = 0;

    public function __construct() {
        \GPBMetadata\Config::initOnce();
        parent::__construct();
    }

    /**
     *
     * Number of seconds the screen stays on after pressing the user button or receiving a message
     * 0 for default of one minute MAXUINT for always on
     *
     * Generated from protobuf field <code>uint32 screen_on_secs = 1;</code>
     * @return int
     */
    public function getScreenOnSecs()
    {
        return $this->screen_on_secs;
    }

    /**
     *
     * Number of seconds the screen stays on after pressing the user button or receiving a message
     * 0 for default of one minute MAXUINT for always on
     *
     * Generated from protobuf field <code>uint32 screen_on_secs = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setScreenOnSecs($var)
    {
        GPBUtil::checkUint32($var);
        $this->screen_on_secs = $var;

        return $this;
    }

    /**
     *
     * How the GPS coordinates are formatted on the OLED screen.
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2;</code>
     * @return int
     */
    public function getGpsFormat()
    {
        return $this->gps_format;
    }

    /**
     *
     * How the GPS coordinates are formatted on the OLED screen.
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.GpsCoordinateFormat gps_format = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setGpsFormat($var)
    {
        GPBUtil::checkEnum($var, \Config_DisplayConfig_GpsCoordinateFormat::class);
        $this->gps_format = $var;

        return $this;
    }

    /**
     *
     * Automatically toggles to the next page on the screen like a carousel, based the specified interval in seconds.
     * Potentially useful for devices without user buttons.
     *
     * Generated from protobuf field <code>uint32 auto_screen_carousel_secs = 3;</code>
     * @return int
     */
    public function getAutoScreenCarouselSecs()
    {
        return $this->auto_screen_carousel_secs;
    }

    /**
     *
     * Automatically toggles to the next page on the screen like a carousel, based the specified interval in seconds.
     * Potentially useful for devices without user buttons.
     *
     * Generated from protobuf field <code>uint32 auto_screen_carousel_secs = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setAutoScreenCarouselSecs($var)
    {
        GPBUtil::checkUint32($var);
        $this->auto_screen_carousel_secs = $var;

        return $this;
    }

    /**
     *
     * If this is set, the displayed compass will always point north. if unset, the old behaviour 
     * (top of display is heading direction) is used.
     *
     * Generated from protobuf field <code>bool compass_north_top = 4;</code>
     * @return bool
     */
    public function getCompassNorthTop()
    {
        return $this->compass_north_top;
    }

    /**
     *
     * If this is set, the displayed compass will always point north. if unset, the old behaviour 
     * (top of display is heading direction) is used.
     *
     * Generated from protobuf field <code>bool compass_north_top = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setCompassNorthTop($var)
    {
        GPBUtil::checkBool($var);
        $this->compass_north_top = $var;

        return $this;
    }

    /**
     *
     * Flip screen vertically, for cases that mount the screen upside down
     *
     * Generated from protobuf field <code>bool flip_screen = 5;</code>
     * @return bool
     */
    public function getFlipScreen()
    {
        return $this->flip_screen;
    }

    /**
     *
     * Flip screen vertically, for cases that mount the screen upside down
     *
     * Generated from protobuf field <code>bool flip_screen = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setFlipScreen($var)
    {
        GPBUtil::checkBool($var);
        $this->flip_screen = $var;

        return $this;
    }

    /**
     *
     * Perferred display units
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.DisplayUnits units = 6;</code>
     * @return int
     */
    public function getUnits()
    {
        return $this->units;
    }

    /**
     *
     * Perferred display units
     *
     * Generated from protobuf field <code>.Config.DisplayConfig.DisplayUnits units = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setUnits($var)
    {
        GPBUtil::checkEnum($var, \Config_DisplayConfig_DisplayUnits::class);
        $this->units = $var;

        return $this;
    }

}

