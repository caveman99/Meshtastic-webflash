<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: module_config.proto

namespace ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * TODO: REPLACE
 *
 * Generated from protobuf message <code>ModuleConfig.CannedMessageConfig</code>
 */
class CannedMessageConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating.
     *
     * Generated from protobuf field <code>bool rotary1_enabled = 1;</code>
     */
    protected $rotary1_enabled = false;
    /**
     * GPIO pin for rotary encoder A port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_a = 2;</code>
     */
    protected $inputbroker_pin_a = 0;
    /**
     * GPIO pin for rotary encoder B port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_b = 3;</code>
     */
    protected $inputbroker_pin_b = 0;
    /**
     * GPIO pin for rotary encoder Press port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_press = 4;</code>
     */
    protected $inputbroker_pin_press = 0;
    /**
     * Generate input event on CW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_cw = 5;</code>
     */
    protected $inputbroker_event_cw = 0;
    /**
     * Generate input event on CCW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_ccw = 6;</code>
     */
    protected $inputbroker_event_ccw = 0;
    /**
     * Generate input event on Press of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_press = 7;</code>
     */
    protected $inputbroker_event_press = 0;
    /**
     * Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker.
     *
     * Generated from protobuf field <code>bool updown1_enabled = 8;</code>
     */
    protected $updown1_enabled = false;
    /**
     * Enable/disable CannedMessageModule.
     *
     * Generated from protobuf field <code>bool enabled = 9;</code>
     */
    protected $enabled = false;
    /**
     * Input event origin accepted by the canned message module.
     * Can be e.g. "rotEnc1", "upDownEnc1" or keyword "_any"
     *
     * Generated from protobuf field <code>string allow_input_source = 10;</code>
     */
    protected $allow_input_source = '';
    /**
     * CannedMessageModule also sends a bell character with the messages.
     * ExternalNotificationModule can benefit from this feature.
     *
     * Generated from protobuf field <code>bool send_bell = 11;</code>
     */
    protected $send_bell = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $rotary1_enabled
     *           Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating.
     *     @type int $inputbroker_pin_a
     *           GPIO pin for rotary encoder A port.
     *     @type int $inputbroker_pin_b
     *           GPIO pin for rotary encoder B port.
     *     @type int $inputbroker_pin_press
     *           GPIO pin for rotary encoder Press port.
     *     @type int $inputbroker_event_cw
     *           Generate input event on CW of this kind.
     *     @type int $inputbroker_event_ccw
     *           Generate input event on CCW of this kind.
     *     @type int $inputbroker_event_press
     *           Generate input event on Press of this kind.
     *     @type bool $updown1_enabled
     *           Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker.
     *     @type bool $enabled
     *           Enable/disable CannedMessageModule.
     *     @type string $allow_input_source
     *           Input event origin accepted by the canned message module.
     *           Can be e.g. "rotEnc1", "upDownEnc1" or keyword "_any"
     *     @type bool $send_bell
     *           CannedMessageModule also sends a bell character with the messages.
     *           ExternalNotificationModule can benefit from this feature.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating.
     *
     * Generated from protobuf field <code>bool rotary1_enabled = 1;</code>
     * @return bool
     */
    public function getRotary1Enabled()
    {
        return $this->rotary1_enabled;
    }

    /**
     * Enable the rotary encoder #1. This is a 'dumb' encoder sending pulses on both A and B pins while rotating.
     *
     * Generated from protobuf field <code>bool rotary1_enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setRotary1Enabled($var)
    {
        GPBUtil::checkBool($var);
        $this->rotary1_enabled = $var;

        return $this;
    }

    /**
     * GPIO pin for rotary encoder A port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_a = 2;</code>
     * @return int
     */
    public function getInputbrokerPinA()
    {
        return $this->inputbroker_pin_a;
    }

    /**
     * GPIO pin for rotary encoder A port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_a = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerPinA($var)
    {
        GPBUtil::checkUint32($var);
        $this->inputbroker_pin_a = $var;

        return $this;
    }

    /**
     * GPIO pin for rotary encoder B port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_b = 3;</code>
     * @return int
     */
    public function getInputbrokerPinB()
    {
        return $this->inputbroker_pin_b;
    }

    /**
     * GPIO pin for rotary encoder B port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_b = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerPinB($var)
    {
        GPBUtil::checkUint32($var);
        $this->inputbroker_pin_b = $var;

        return $this;
    }

    /**
     * GPIO pin for rotary encoder Press port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_press = 4;</code>
     * @return int
     */
    public function getInputbrokerPinPress()
    {
        return $this->inputbroker_pin_press;
    }

    /**
     * GPIO pin for rotary encoder Press port.
     *
     * Generated from protobuf field <code>uint32 inputbroker_pin_press = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerPinPress($var)
    {
        GPBUtil::checkUint32($var);
        $this->inputbroker_pin_press = $var;

        return $this;
    }

    /**
     * Generate input event on CW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_cw = 5;</code>
     * @return int
     */
    public function getInputbrokerEventCw()
    {
        return $this->inputbroker_event_cw;
    }

    /**
     * Generate input event on CW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_cw = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerEventCw($var)
    {
        GPBUtil::checkEnum($var, \ModuleConfig\CannedMessageConfig\InputEventChar::class);
        $this->inputbroker_event_cw = $var;

        return $this;
    }

    /**
     * Generate input event on CCW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_ccw = 6;</code>
     * @return int
     */
    public function getInputbrokerEventCcw()
    {
        return $this->inputbroker_event_ccw;
    }

    /**
     * Generate input event on CCW of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_ccw = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerEventCcw($var)
    {
        GPBUtil::checkEnum($var, \ModuleConfig\CannedMessageConfig\InputEventChar::class);
        $this->inputbroker_event_ccw = $var;

        return $this;
    }

    /**
     * Generate input event on Press of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_press = 7;</code>
     * @return int
     */
    public function getInputbrokerEventPress()
    {
        return $this->inputbroker_event_press;
    }

    /**
     * Generate input event on Press of this kind.
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig.InputEventChar inputbroker_event_press = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setInputbrokerEventPress($var)
    {
        GPBUtil::checkEnum($var, \ModuleConfig\CannedMessageConfig\InputEventChar::class);
        $this->inputbroker_event_press = $var;

        return $this;
    }

    /**
     * Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker.
     *
     * Generated from protobuf field <code>bool updown1_enabled = 8;</code>
     * @return bool
     */
    public function getUpdown1Enabled()
    {
        return $this->updown1_enabled;
    }

    /**
     * Enable the Up/Down/Select input device. Can be RAK rotary encoder or 3 buttons. Uses the a/b/press definitions from inputbroker.
     *
     * Generated from protobuf field <code>bool updown1_enabled = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setUpdown1Enabled($var)
    {
        GPBUtil::checkBool($var);
        $this->updown1_enabled = $var;

        return $this;
    }

    /**
     * Enable/disable CannedMessageModule.
     *
     * Generated from protobuf field <code>bool enabled = 9;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Enable/disable CannedMessageModule.
     *
     * Generated from protobuf field <code>bool enabled = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * Input event origin accepted by the canned message module.
     * Can be e.g. "rotEnc1", "upDownEnc1" or keyword "_any"
     *
     * Generated from protobuf field <code>string allow_input_source = 10;</code>
     * @return string
     */
    public function getAllowInputSource()
    {
        return $this->allow_input_source;
    }

    /**
     * Input event origin accepted by the canned message module.
     * Can be e.g. "rotEnc1", "upDownEnc1" or keyword "_any"
     *
     * Generated from protobuf field <code>string allow_input_source = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setAllowInputSource($var)
    {
        GPBUtil::checkString($var, True);
        $this->allow_input_source = $var;

        return $this;
    }

    /**
     * CannedMessageModule also sends a bell character with the messages.
     * ExternalNotificationModule can benefit from this feature.
     *
     * Generated from protobuf field <code>bool send_bell = 11;</code>
     * @return bool
     */
    public function getSendBell()
    {
        return $this->send_bell;
    }

    /**
     * CannedMessageModule also sends a bell character with the messages.
     * ExternalNotificationModule can benefit from this feature.
     *
     * Generated from protobuf field <code>bool send_bell = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setSendBell($var)
    {
        GPBUtil::checkBool($var);
        $this->send_bell = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CannedMessageConfig::class, \ModuleConfig_CannedMessageConfig::class);

