<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: module_config.proto

namespace ModuleConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * External Notifications Config
 *
 * Generated from protobuf message <code>ModuleConfig.ExternalNotificationConfig</code>
 */
class ExternalNotificationConfig extends \Google\Protobuf\Internal\Message
{
    /**
     * Enable the ExternalNotificationModule
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    protected $enabled = false;
    /**
     * When using in On/Off mode, keep the output on for this many
     * milliseconds. Default 1000ms (1 second).
     *
     * Generated from protobuf field <code>uint32 output_ms = 2;</code>
     */
    protected $output_ms = 0;
    /**
     * Define the output pin GPIO setting Defaults to
     * EXT_NOTIFY_OUT if set for the board.
     * In standalone devices this pin should drive the LED to match the UI.
     *
     * Generated from protobuf field <code>uint32 output = 3;</code>
     */
    protected $output = 0;
    /**
     * Optional: Define a secondary output pin for a vibra motor
     * This is used in standalone devices to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_vibra = 8;</code>
     */
    protected $output_vibra = 0;
    /**
     * Optional: Define a tertiary output pin for an active buzzer
     * This is used in standalone devices to to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_buzzer = 9;</code>
     */
    protected $output_buzzer = 0;
    /**
     * IF this is true, the 'output' Pin will be pulled active high, false
     * means active low.
     *
     * Generated from protobuf field <code>bool active = 4;</code>
     */
    protected $active = false;
    /**
     * True: Alert when a text message arrives (output)
     *
     * Generated from protobuf field <code>bool alert_message = 5;</code>
     */
    protected $alert_message = false;
    /**
     * True: Alert when a text message arrives (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_message_vibra = 10;</code>
     */
    protected $alert_message_vibra = false;
    /**
     * True: Alert when a text message arrives (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_message_buzzer = 11;</code>
     */
    protected $alert_message_buzzer = false;
    /**
     * True: Alert when the bell character is received (output)
     *
     * Generated from protobuf field <code>bool alert_bell = 6;</code>
     */
    protected $alert_bell = false;
    /**
     * True: Alert when the bell character is received (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_bell_vibra = 12;</code>
     */
    protected $alert_bell_vibra = false;
    /**
     * True: Alert when the bell character is received (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_bell_buzzer = 13;</code>
     */
    protected $alert_bell_buzzer = false;
    /**
     * use a PWM output instead of a simple on/off output. This will ignore
     * the 'output', 'output_ms' and 'active' settings and use the
     * device.buzzer_gpio instead.
     *
     * Generated from protobuf field <code>bool use_pwm = 7;</code>
     */
    protected $use_pwm = false;
    /**
     * The notification will toggle with 'output_ms' for this time of seconds.
     * Default is 0 which means don't repeat at all. 60 would mean blink
     * and/or beep for 60 seconds
     *
     * Generated from protobuf field <code>uint32 nag_timeout = 14;</code>
     */
    protected $nag_timeout = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type bool $enabled
     *           Enable the ExternalNotificationModule
     *     @type int $output_ms
     *           When using in On/Off mode, keep the output on for this many
     *           milliseconds. Default 1000ms (1 second).
     *     @type int $output
     *           Define the output pin GPIO setting Defaults to
     *           EXT_NOTIFY_OUT if set for the board.
     *           In standalone devices this pin should drive the LED to match the UI.
     *     @type int $output_vibra
     *           Optional: Define a secondary output pin for a vibra motor
     *           This is used in standalone devices to match the UI.
     *     @type int $output_buzzer
     *           Optional: Define a tertiary output pin for an active buzzer
     *           This is used in standalone devices to to match the UI.
     *     @type bool $active
     *           IF this is true, the 'output' Pin will be pulled active high, false
     *           means active low.
     *     @type bool $alert_message
     *           True: Alert when a text message arrives (output)
     *     @type bool $alert_message_vibra
     *           True: Alert when a text message arrives (output_vibra)
     *     @type bool $alert_message_buzzer
     *           True: Alert when a text message arrives (output_buzzer)
     *     @type bool $alert_bell
     *           True: Alert when the bell character is received (output)
     *     @type bool $alert_bell_vibra
     *           True: Alert when the bell character is received (output_vibra)
     *     @type bool $alert_bell_buzzer
     *           True: Alert when the bell character is received (output_buzzer)
     *     @type bool $use_pwm
     *           use a PWM output instead of a simple on/off output. This will ignore
     *           the 'output', 'output_ms' and 'active' settings and use the
     *           device.buzzer_gpio instead.
     *     @type int $nag_timeout
     *           The notification will toggle with 'output_ms' for this time of seconds.
     *           Default is 0 which means don't repeat at all. 60 would mean blink
     *           and/or beep for 60 seconds
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\ModuleConfig::initOnce();
        parent::__construct($data);
    }

    /**
     * Enable the ExternalNotificationModule
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     * Enable the ExternalNotificationModule
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * When using in On/Off mode, keep the output on for this many
     * milliseconds. Default 1000ms (1 second).
     *
     * Generated from protobuf field <code>uint32 output_ms = 2;</code>
     * @return int
     */
    public function getOutputMs()
    {
        return $this->output_ms;
    }

    /**
     * When using in On/Off mode, keep the output on for this many
     * milliseconds. Default 1000ms (1 second).
     *
     * Generated from protobuf field <code>uint32 output_ms = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setOutputMs($var)
    {
        GPBUtil::checkUint32($var);
        $this->output_ms = $var;

        return $this;
    }

    /**
     * Define the output pin GPIO setting Defaults to
     * EXT_NOTIFY_OUT if set for the board.
     * In standalone devices this pin should drive the LED to match the UI.
     *
     * Generated from protobuf field <code>uint32 output = 3;</code>
     * @return int
     */
    public function getOutput()
    {
        return $this->output;
    }

    /**
     * Define the output pin GPIO setting Defaults to
     * EXT_NOTIFY_OUT if set for the board.
     * In standalone devices this pin should drive the LED to match the UI.
     *
     * Generated from protobuf field <code>uint32 output = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setOutput($var)
    {
        GPBUtil::checkUint32($var);
        $this->output = $var;

        return $this;
    }

    /**
     * Optional: Define a secondary output pin for a vibra motor
     * This is used in standalone devices to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_vibra = 8;</code>
     * @return int
     */
    public function getOutputVibra()
    {
        return $this->output_vibra;
    }

    /**
     * Optional: Define a secondary output pin for a vibra motor
     * This is used in standalone devices to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_vibra = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setOutputVibra($var)
    {
        GPBUtil::checkUint32($var);
        $this->output_vibra = $var;

        return $this;
    }

    /**
     * Optional: Define a tertiary output pin for an active buzzer
     * This is used in standalone devices to to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_buzzer = 9;</code>
     * @return int
     */
    public function getOutputBuzzer()
    {
        return $this->output_buzzer;
    }

    /**
     * Optional: Define a tertiary output pin for an active buzzer
     * This is used in standalone devices to to match the UI.
     *
     * Generated from protobuf field <code>uint32 output_buzzer = 9;</code>
     * @param int $var
     * @return $this
     */
    public function setOutputBuzzer($var)
    {
        GPBUtil::checkUint32($var);
        $this->output_buzzer = $var;

        return $this;
    }

    /**
     * IF this is true, the 'output' Pin will be pulled active high, false
     * means active low.
     *
     * Generated from protobuf field <code>bool active = 4;</code>
     * @return bool
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * IF this is true, the 'output' Pin will be pulled active high, false
     * means active low.
     *
     * Generated from protobuf field <code>bool active = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setActive($var)
    {
        GPBUtil::checkBool($var);
        $this->active = $var;

        return $this;
    }

    /**
     * True: Alert when a text message arrives (output)
     *
     * Generated from protobuf field <code>bool alert_message = 5;</code>
     * @return bool
     */
    public function getAlertMessage()
    {
        return $this->alert_message;
    }

    /**
     * True: Alert when a text message arrives (output)
     *
     * Generated from protobuf field <code>bool alert_message = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertMessage($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_message = $var;

        return $this;
    }

    /**
     * True: Alert when a text message arrives (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_message_vibra = 10;</code>
     * @return bool
     */
    public function getAlertMessageVibra()
    {
        return $this->alert_message_vibra;
    }

    /**
     * True: Alert when a text message arrives (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_message_vibra = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertMessageVibra($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_message_vibra = $var;

        return $this;
    }

    /**
     * True: Alert when a text message arrives (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_message_buzzer = 11;</code>
     * @return bool
     */
    public function getAlertMessageBuzzer()
    {
        return $this->alert_message_buzzer;
    }

    /**
     * True: Alert when a text message arrives (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_message_buzzer = 11;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertMessageBuzzer($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_message_buzzer = $var;

        return $this;
    }

    /**
     * True: Alert when the bell character is received (output)
     *
     * Generated from protobuf field <code>bool alert_bell = 6;</code>
     * @return bool
     */
    public function getAlertBell()
    {
        return $this->alert_bell;
    }

    /**
     * True: Alert when the bell character is received (output)
     *
     * Generated from protobuf field <code>bool alert_bell = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertBell($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_bell = $var;

        return $this;
    }

    /**
     * True: Alert when the bell character is received (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_bell_vibra = 12;</code>
     * @return bool
     */
    public function getAlertBellVibra()
    {
        return $this->alert_bell_vibra;
    }

    /**
     * True: Alert when the bell character is received (output_vibra)
     *
     * Generated from protobuf field <code>bool alert_bell_vibra = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertBellVibra($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_bell_vibra = $var;

        return $this;
    }

    /**
     * True: Alert when the bell character is received (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_bell_buzzer = 13;</code>
     * @return bool
     */
    public function getAlertBellBuzzer()
    {
        return $this->alert_bell_buzzer;
    }

    /**
     * True: Alert when the bell character is received (output_buzzer)
     *
     * Generated from protobuf field <code>bool alert_bell_buzzer = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setAlertBellBuzzer($var)
    {
        GPBUtil::checkBool($var);
        $this->alert_bell_buzzer = $var;

        return $this;
    }

    /**
     * use a PWM output instead of a simple on/off output. This will ignore
     * the 'output', 'output_ms' and 'active' settings and use the
     * device.buzzer_gpio instead.
     *
     * Generated from protobuf field <code>bool use_pwm = 7;</code>
     * @return bool
     */
    public function getUsePwm()
    {
        return $this->use_pwm;
    }

    /**
     * use a PWM output instead of a simple on/off output. This will ignore
     * the 'output', 'output_ms' and 'active' settings and use the
     * device.buzzer_gpio instead.
     *
     * Generated from protobuf field <code>bool use_pwm = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setUsePwm($var)
    {
        GPBUtil::checkBool($var);
        $this->use_pwm = $var;

        return $this;
    }

    /**
     * The notification will toggle with 'output_ms' for this time of seconds.
     * Default is 0 which means don't repeat at all. 60 would mean blink
     * and/or beep for 60 seconds
     *
     * Generated from protobuf field <code>uint32 nag_timeout = 14;</code>
     * @return int
     */
    public function getNagTimeout()
    {
        return $this->nag_timeout;
    }

    /**
     * The notification will toggle with 'output_ms' for this time of seconds.
     * Default is 0 which means don't repeat at all. 60 would mean blink
     * and/or beep for 60 seconds
     *
     * Generated from protobuf field <code>uint32 nag_timeout = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setNagTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->nag_timeout = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ExternalNotificationConfig::class, \ModuleConfig_ExternalNotificationConfig::class);

