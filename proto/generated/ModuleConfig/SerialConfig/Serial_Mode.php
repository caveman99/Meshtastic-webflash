<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: module_config.proto

namespace ModuleConfig\SerialConfig;

use UnexpectedValueException;

/**
 * TODO: REPLACE
 *
 * Protobuf type <code>ModuleConfig.SerialConfig.Serial_Mode</code>
 */
class Serial_Mode
{
    /**
     * Generated from protobuf enum <code>DEFAULT = 0;</code>
     */
    const PBDEFAULT = 0;
    /**
     * Generated from protobuf enum <code>SIMPLE = 1;</code>
     */
    const SIMPLE = 1;
    /**
     * Generated from protobuf enum <code>PROTO = 2;</code>
     */
    const PROTO = 2;
    /**
     * Generated from protobuf enum <code>TEXTMSG = 3;</code>
     */
    const TEXTMSG = 3;
    /**
     * Generated from protobuf enum <code>NMEA = 4;</code>
     */
    const NMEA = 4;

    private static $valueToName = [
        self::PBDEFAULT => 'DEFAULT',
        self::SIMPLE => 'SIMPLE',
        self::PROTO => 'PROTO',
        self::TEXTMSG => 'TEXTMSG',
        self::NMEA => 'NMEA',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Serial_Mode::class, \ModuleConfig_SerialConfig_Serial_Mode::class);

