<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: telemetry.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Key native device metrics such as battery level
 *
 * Generated from protobuf message <code>DeviceMetrics</code>
 */
class DeviceMetrics extends \Google\Protobuf\Internal\Message
{
    /**
     * 1-100 (0 means powered)
     *
     * Generated from protobuf field <code>uint32 battery_level = 1;</code>
     */
    protected $battery_level = 0;
    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>float voltage = 2;</code>
     */
    protected $voltage = 0.0;
    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>float channel_utilization = 3;</code>
     */
    protected $channel_utilization = 0.0;
    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>float air_util_tx = 4;</code>
     */
    protected $air_util_tx = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $battery_level
     *           1-100 (0 means powered)
     *     @type float $voltage
     *           Voltage measured
     *     @type float $channel_utilization
     *           Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *     @type float $air_util_tx
     *           Percent of airtime for transmission used within the last hour.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Telemetry::initOnce();
        parent::__construct($data);
    }

    /**
     * 1-100 (0 means powered)
     *
     * Generated from protobuf field <code>uint32 battery_level = 1;</code>
     * @return int
     */
    public function getBatteryLevel()
    {
        return $this->battery_level;
    }

    /**
     * 1-100 (0 means powered)
     *
     * Generated from protobuf field <code>uint32 battery_level = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setBatteryLevel($var)
    {
        GPBUtil::checkUint32($var);
        $this->battery_level = $var;

        return $this;
    }

    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>float voltage = 2;</code>
     * @return float
     */
    public function getVoltage()
    {
        return $this->voltage;
    }

    /**
     * Voltage measured
     *
     * Generated from protobuf field <code>float voltage = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setVoltage($var)
    {
        GPBUtil::checkFloat($var);
        $this->voltage = $var;

        return $this;
    }

    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>float channel_utilization = 3;</code>
     * @return float
     */
    public function getChannelUtilization()
    {
        return $this->channel_utilization;
    }

    /**
     * Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
     *
     * Generated from protobuf field <code>float channel_utilization = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setChannelUtilization($var)
    {
        GPBUtil::checkFloat($var);
        $this->channel_utilization = $var;

        return $this;
    }

    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>float air_util_tx = 4;</code>
     * @return float
     */
    public function getAirUtilTx()
    {
        return $this->air_util_tx;
    }

    /**
     * Percent of airtime for transmission used within the last hour.
     *
     * Generated from protobuf field <code>float air_util_tx = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setAirUtilTx($var)
    {
        GPBUtil::checkFloat($var);
        $this->air_util_tx = $var;

        return $this;
    }

}

