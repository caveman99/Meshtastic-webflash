<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: module_config.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *
 * MQTT Client Config
 *
 * Generated from protobuf message <code>ModuleConfig.MQTTConfig</code>
 */
class ModuleConfig_MQTTConfig extends \Google\Protobuf\Internal\Message
{
    /**
     *
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     */
    private $enabled = false;
    /**
     *
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     */
    private $address = '';
    /**
     *
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     */
    private $username = '';
    /**
     *
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     */
    private $password = '';
    /**
     *
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     */
    private $encryption_enabled = false;
    /**
     *
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     */
    private $json_enabled = false;

    public function __construct() {
        \GPBMetadata\ModuleConfig::initOnce();
        parent::__construct();
    }

    /**
     *
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }

    /**
     *
     * If a meshtastic node is able to reach the internet it will normally attempt to gateway any channels that are marked as
     * is_uplink_enabled or is_downlink_enabled.
     *
     * Generated from protobuf field <code>bool enabled = 1;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     *
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     *
     * The server to use for our MQTT global message gateway feature.
     * If not set, the default server will be used
     *
     * Generated from protobuf field <code>string address = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAddress($var)
    {
        GPBUtil::checkString($var, True);
        $this->address = $var;

        return $this;
    }

    /**
     *
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     *
     * MQTT username to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default username
     *
     * Generated from protobuf field <code>string username = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setUsername($var)
    {
        GPBUtil::checkString($var, True);
        $this->username = $var;

        return $this;
    }

    /**
     *
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     *
     * MQTT password to use (most useful for a custom MQTT server).
     * If using a custom server, this will be honoured even if empty.
     * If using the default server, this will only be honoured if set, otherwise the device will use the default password
     *
     * Generated from protobuf field <code>string password = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setPassword($var)
    {
        GPBUtil::checkString($var, True);
        $this->password = $var;

        return $this;
    }

    /**
     *
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     * @return bool
     */
    public function getEncryptionEnabled()
    {
        return $this->encryption_enabled;
    }

    /**
     *
     * Whether to send encrypted or decrypted packets to MQTT.
     * This parameter is only honoured if you also set server
     * (the default official mqtt.meshtastic.org server can handle encrypted packets)
     * Decrypted packets may be useful for external systems that want to consume meshtastic packets
     *
     * Generated from protobuf field <code>bool encryption_enabled = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setEncryptionEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->encryption_enabled = $var;

        return $this;
    }

    /**
     *
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     * @return bool
     */
    public function getJsonEnabled()
    {
        return $this->json_enabled;
    }

    /**
     *
     * Whether to send / consume json packets on MQTT
     *
     * Generated from protobuf field <code>bool json_enabled = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setJsonEnabled($var)
    {
        GPBUtil::checkBool($var);
        $this->json_enabled = $var;

        return $this;
    }

}

