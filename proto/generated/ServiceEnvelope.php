<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mqtt.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 *
 * This message wraps a MeshPacket with extra metadata about the sender and how it arrived.
 *
 * Generated from protobuf message <code>ServiceEnvelope</code>
 */
class ServiceEnvelope extends \Google\Protobuf\Internal\Message
{
    /**
     *
     * The (probably encrypted) packet
     *
     * Generated from protobuf field <code>.MeshPacket packet = 1;</code>
     */
    private $packet = null;
    /**
     *
     * The global channel ID it was sent on
     *
     * Generated from protobuf field <code>string channel_id = 2;</code>
     */
    private $channel_id = '';
    /**
     *
     * The sending gateway node ID. Can we use this to authenticate/prevent fake
     * nodeid impersonation for senders? - i.e. use gateway/mesh id (which is authenticated) + local node id as
     * the globally trusted nodenum
     *
     * Generated from protobuf field <code>string gateway_id = 3;</code>
     */
    private $gateway_id = '';

    public function __construct() {
        \GPBMetadata\Mqtt::initOnce();
        parent::__construct();
    }

    /**
     *
     * The (probably encrypted) packet
     *
     * Generated from protobuf field <code>.MeshPacket packet = 1;</code>
     * @return \MeshPacket
     */
    public function getPacket()
    {
        return $this->packet;
    }

    /**
     *
     * The (probably encrypted) packet
     *
     * Generated from protobuf field <code>.MeshPacket packet = 1;</code>
     * @param \MeshPacket $var
     * @return $this
     */
    public function setPacket($var)
    {
        GPBUtil::checkMessage($var, \MeshPacket::class);
        $this->packet = $var;

        return $this;
    }

    /**
     *
     * The global channel ID it was sent on
     *
     * Generated from protobuf field <code>string channel_id = 2;</code>
     * @return string
     */
    public function getChannelId()
    {
        return $this->channel_id;
    }

    /**
     *
     * The global channel ID it was sent on
     *
     * Generated from protobuf field <code>string channel_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setChannelId($var)
    {
        GPBUtil::checkString($var, True);
        $this->channel_id = $var;

        return $this;
    }

    /**
     *
     * The sending gateway node ID. Can we use this to authenticate/prevent fake
     * nodeid impersonation for senders? - i.e. use gateway/mesh id (which is authenticated) + local node id as
     * the globally trusted nodenum
     *
     * Generated from protobuf field <code>string gateway_id = 3;</code>
     * @return string
     */
    public function getGatewayId()
    {
        return $this->gateway_id;
    }

    /**
     *
     * The sending gateway node ID. Can we use this to authenticate/prevent fake
     * nodeid impersonation for senders? - i.e. use gateway/mesh id (which is authenticated) + local node id as
     * the globally trusted nodenum
     *
     * Generated from protobuf field <code>string gateway_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setGatewayId($var)
    {
        GPBUtil::checkString($var, True);
        $this->gateway_id = $var;

        return $this;
    }

}

