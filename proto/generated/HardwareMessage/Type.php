<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: remote_hardware.proto

namespace HardwareMessage;

use UnexpectedValueException;

/**
 * TODO: REPLACE
 *
 * Protobuf type <code>HardwareMessage.Type</code>
 */
class Type
{
    /**
     * Unset/unused
     *
     * Generated from protobuf enum <code>UNSET = 0;</code>
     */
    const PBUNSET = 0;
    /**
     * Set gpio gpios based on gpio_mask/gpio_value
     *
     * Generated from protobuf enum <code>WRITE_GPIOS = 1;</code>
     */
    const WRITE_GPIOS = 1;
    /**
     * We are now interested in watching the gpio_mask gpios.
     * If the selected gpios change, please broadcast GPIOS_CHANGED.
     * Will implicitly change the gpios requested to be INPUT gpios.
     *
     * Generated from protobuf enum <code>WATCH_GPIOS = 2;</code>
     */
    const WATCH_GPIOS = 2;
    /**
     * The gpios listed in gpio_mask have changed, the new values are listed in gpio_value
     *
     * Generated from protobuf enum <code>GPIOS_CHANGED = 3;</code>
     */
    const GPIOS_CHANGED = 3;
    /**
     * Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated
     *
     * Generated from protobuf enum <code>READ_GPIOS = 4;</code>
     */
    const READ_GPIOS = 4;
    /**
     * A reply to READ_GPIOS. gpio_mask and gpio_value will be populated
     *
     * Generated from protobuf enum <code>READ_GPIOS_REPLY = 5;</code>
     */
    const READ_GPIOS_REPLY = 5;

    private static $valueToName = [
        self::PBUNSET => 'UNSET',
        self::WRITE_GPIOS => 'WRITE_GPIOS',
        self::WATCH_GPIOS => 'WATCH_GPIOS',
        self::GPIOS_CHANGED => 'GPIOS_CHANGED',
        self::READ_GPIOS => 'READ_GPIOS',
        self::READ_GPIOS_REPLY => 'READ_GPIOS_REPLY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \HardwareMessage_Type::class);

