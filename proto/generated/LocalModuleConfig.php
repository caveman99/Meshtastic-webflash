<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: localonly.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>LocalModuleConfig</code>
 */
class LocalModuleConfig extends \Google\Protobuf\Internal\Message
{
    /**
     *
     * The part of the config that is specific to the MQTT module
     *
     * Generated from protobuf field <code>.ModuleConfig.MQTTConfig mqtt = 1;</code>
     */
    private $mqtt = null;
    /**
     *
     * The part of the config that is specific to the Serial module
     *
     * Generated from protobuf field <code>.ModuleConfig.SerialConfig serial = 2;</code>
     */
    private $serial = null;
    /**
     *
     * The part of the config that is specific to the ExternalNotification module
     *
     * Generated from protobuf field <code>.ModuleConfig.ExternalNotificationConfig external_notification = 3;</code>
     */
    private $external_notification = null;
    /**
     *
     * The part of the config that is specific to the Store & Forward module
     *
     * Generated from protobuf field <code>.ModuleConfig.StoreForwardConfig store_forward = 4;</code>
     */
    private $store_forward = null;
    /**
     *
     * The part of the config that is specific to the RangeTest module
     *
     * Generated from protobuf field <code>.ModuleConfig.RangeTestConfig range_test = 5;</code>
     */
    private $range_test = null;
    /**
     *
     * The part of the config that is specific to the Telemetry module
     *
     * Generated from protobuf field <code>.ModuleConfig.TelemetryConfig telemetry = 6;</code>
     */
    private $telemetry = null;
    /**
     *
     * The part of the config that is specific to the Canned Message module
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig canned_message = 7;</code>
     */
    private $canned_message = null;
    /**
     *
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     */
    private $version = 0;

    public function __construct() {
        \GPBMetadata\Localonly::initOnce();
        parent::__construct();
    }

    /**
     *
     * The part of the config that is specific to the MQTT module
     *
     * Generated from protobuf field <code>.ModuleConfig.MQTTConfig mqtt = 1;</code>
     * @return \ModuleConfig_MQTTConfig
     */
    public function getMqtt()
    {
        return $this->mqtt;
    }

    /**
     *
     * The part of the config that is specific to the MQTT module
     *
     * Generated from protobuf field <code>.ModuleConfig.MQTTConfig mqtt = 1;</code>
     * @param \ModuleConfig_MQTTConfig $var
     * @return $this
     */
    public function setMqtt($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_MQTTConfig::class);
        $this->mqtt = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the Serial module
     *
     * Generated from protobuf field <code>.ModuleConfig.SerialConfig serial = 2;</code>
     * @return \ModuleConfig_SerialConfig
     */
    public function getSerial()
    {
        return $this->serial;
    }

    /**
     *
     * The part of the config that is specific to the Serial module
     *
     * Generated from protobuf field <code>.ModuleConfig.SerialConfig serial = 2;</code>
     * @param \ModuleConfig_SerialConfig $var
     * @return $this
     */
    public function setSerial($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_SerialConfig::class);
        $this->serial = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the ExternalNotification module
     *
     * Generated from protobuf field <code>.ModuleConfig.ExternalNotificationConfig external_notification = 3;</code>
     * @return \ModuleConfig_ExternalNotificationConfig
     */
    public function getExternalNotification()
    {
        return $this->external_notification;
    }

    /**
     *
     * The part of the config that is specific to the ExternalNotification module
     *
     * Generated from protobuf field <code>.ModuleConfig.ExternalNotificationConfig external_notification = 3;</code>
     * @param \ModuleConfig_ExternalNotificationConfig $var
     * @return $this
     */
    public function setExternalNotification($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_ExternalNotificationConfig::class);
        $this->external_notification = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the Store & Forward module
     *
     * Generated from protobuf field <code>.ModuleConfig.StoreForwardConfig store_forward = 4;</code>
     * @return \ModuleConfig_StoreForwardConfig
     */
    public function getStoreForward()
    {
        return $this->store_forward;
    }

    /**
     *
     * The part of the config that is specific to the Store & Forward module
     *
     * Generated from protobuf field <code>.ModuleConfig.StoreForwardConfig store_forward = 4;</code>
     * @param \ModuleConfig_StoreForwardConfig $var
     * @return $this
     */
    public function setStoreForward($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_StoreForwardConfig::class);
        $this->store_forward = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the RangeTest module
     *
     * Generated from protobuf field <code>.ModuleConfig.RangeTestConfig range_test = 5;</code>
     * @return \ModuleConfig_RangeTestConfig
     */
    public function getRangeTest()
    {
        return $this->range_test;
    }

    /**
     *
     * The part of the config that is specific to the RangeTest module
     *
     * Generated from protobuf field <code>.ModuleConfig.RangeTestConfig range_test = 5;</code>
     * @param \ModuleConfig_RangeTestConfig $var
     * @return $this
     */
    public function setRangeTest($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_RangeTestConfig::class);
        $this->range_test = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the Telemetry module
     *
     * Generated from protobuf field <code>.ModuleConfig.TelemetryConfig telemetry = 6;</code>
     * @return \ModuleConfig_TelemetryConfig
     */
    public function getTelemetry()
    {
        return $this->telemetry;
    }

    /**
     *
     * The part of the config that is specific to the Telemetry module
     *
     * Generated from protobuf field <code>.ModuleConfig.TelemetryConfig telemetry = 6;</code>
     * @param \ModuleConfig_TelemetryConfig $var
     * @return $this
     */
    public function setTelemetry($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_TelemetryConfig::class);
        $this->telemetry = $var;

        return $this;
    }

    /**
     *
     * The part of the config that is specific to the Canned Message module
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig canned_message = 7;</code>
     * @return \ModuleConfig_CannedMessageConfig
     */
    public function getCannedMessage()
    {
        return $this->canned_message;
    }

    /**
     *
     * The part of the config that is specific to the Canned Message module
     *
     * Generated from protobuf field <code>.ModuleConfig.CannedMessageConfig canned_message = 7;</code>
     * @param \ModuleConfig_CannedMessageConfig $var
     * @return $this
     */
    public function setCannedMessage($var)
    {
        GPBUtil::checkMessage($var, \ModuleConfig_CannedMessageConfig::class);
        $this->canned_message = $var;

        return $this;
    }

    /**
     *
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     *
     * A version integer used to invalidate old save files when we make
     * incompatible changes This integer is set at build time and is private to
     * NodeDB.cpp in the device code.
     *
     * Generated from protobuf field <code>uint32 version = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkUint32($var);
        $this->version = $var;

        return $this;
    }

}

