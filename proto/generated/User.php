<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: mesh.proto

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Broadcast when a newly powered mesh node wants to find a node num it can use
 * Sent from the phone over bluetooth to set the user id for the owner of this node.
 * Also sent from nodes to each other when a new node signs on (so all clients can have this info)
 * The algorithm is as follows:
 * when a node starts up, it broadcasts their user and the normal flow is for all
 * other nodes to reply with their User as well (so the new node can build its nodedb)
 * If a node ever receives a User (not just the first broadcast) message where
 * the sender node number equals our node number, that indicates a collision has
 * occurred and the following steps should happen:
 * If the receiving node (that was already in the mesh)'s macaddr is LOWER than the
 * new User who just tried to sign in: it gets to keep its nodenum.
 * We send a broadcast message of OUR User (we use a broadcast so that the other node can
 * receive our message, considering we have the same id - it also serves to let
 * observers correct their nodedb) - this case is rare so it should be okay.
 * If any node receives a User where the macaddr is GTE than their local macaddr,
 * they have been vetoed and should pick a new random nodenum (filtering against
 * whatever it knows about the nodedb) and rebroadcast their User.
 * A few nodenums are reserved and will never be requested:
 * 0xff - broadcast
 * 0 through 3 - for future use
 *
 * Generated from protobuf message <code>User</code>
 */
class User extends \Google\Protobuf\Internal\Message
{
    /**
     * A globally unique ID string for this user.
     * In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !<8 hexidecimal bytes>.
     * Note: app developers are encouraged to also use the following standard
     * node IDs "^all" (for broadcast), "^local" (for the locally connected node)
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 2;</code>
     */
    protected $long_name = '';
    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 3;</code>
     */
    protected $short_name = '';
    /**
     * This is the addr of the radio.
     * Not populated by the phone, but added by the esp32 when broadcasting
     *
     * Generated from protobuf field <code>bytes macaddr = 4;</code>
     */
    protected $macaddr = '';
    /**
     * TBEAM, HELTEC, etc...
     * Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.
     * Apps will still need the string here for older builds
     * (so OTA update can find the right image), but if the enum is available it will be used instead.
     *
     * Generated from protobuf field <code>.HardwareModel hw_model = 5;</code>
     */
    protected $hw_model = 0;
    /**
     * In some regions Ham radio operators have different bandwidth limitations than others.
     * If this user is a licensed operator, set this flag.
     * Also, "long_name" should be their licence number.
     *
     * Generated from protobuf field <code>bool is_licensed = 6;</code>
     */
    protected $is_licensed = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           A globally unique ID string for this user.
     *           In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !<8 hexidecimal bytes>.
     *           Note: app developers are encouraged to also use the following standard
     *           node IDs "^all" (for broadcast), "^local" (for the locally connected node)
     *     @type string $long_name
     *           A full name for this user, i.e. "Kevin Hester"
     *     @type string $short_name
     *           A VERY short name, ideally two characters.
     *           Suitable for a tiny OLED screen
     *     @type string $macaddr
     *           This is the addr of the radio.
     *           Not populated by the phone, but added by the esp32 when broadcasting
     *     @type int $hw_model
     *           TBEAM, HELTEC, etc...
     *           Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.
     *           Apps will still need the string here for older builds
     *           (so OTA update can find the right image), but if the enum is available it will be used instead.
     *     @type bool $is_licensed
     *           In some regions Ham radio operators have different bandwidth limitations than others.
     *           If this user is a licensed operator, set this flag.
     *           Also, "long_name" should be their licence number.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Mesh::initOnce();
        parent::__construct($data);
    }

    /**
     * A globally unique ID string for this user.
     * In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !<8 hexidecimal bytes>.
     * Note: app developers are encouraged to also use the following standard
     * node IDs "^all" (for broadcast), "^local" (for the locally connected node)
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * A globally unique ID string for this user.
     * In the case of Signal that would mean +16504442323, for the default macaddr derived id it would be !<8 hexidecimal bytes>.
     * Note: app developers are encouraged to also use the following standard
     * node IDs "^all" (for broadcast), "^local" (for the locally connected node)
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 2;</code>
     * @return string
     */
    public function getLongName()
    {
        return $this->long_name;
    }

    /**
     * A full name for this user, i.e. "Kevin Hester"
     *
     * Generated from protobuf field <code>string long_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setLongName($var)
    {
        GPBUtil::checkString($var, True);
        $this->long_name = $var;

        return $this;
    }

    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 3;</code>
     * @return string
     */
    public function getShortName()
    {
        return $this->short_name;
    }

    /**
     * A VERY short name, ideally two characters.
     * Suitable for a tiny OLED screen
     *
     * Generated from protobuf field <code>string short_name = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setShortName($var)
    {
        GPBUtil::checkString($var, True);
        $this->short_name = $var;

        return $this;
    }

    /**
     * This is the addr of the radio.
     * Not populated by the phone, but added by the esp32 when broadcasting
     *
     * Generated from protobuf field <code>bytes macaddr = 4;</code>
     * @return string
     */
    public function getMacaddr()
    {
        return $this->macaddr;
    }

    /**
     * This is the addr of the radio.
     * Not populated by the phone, but added by the esp32 when broadcasting
     *
     * Generated from protobuf field <code>bytes macaddr = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setMacaddr($var)
    {
        GPBUtil::checkString($var, False);
        $this->macaddr = $var;

        return $this;
    }

    /**
     * TBEAM, HELTEC, etc...
     * Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.
     * Apps will still need the string here for older builds
     * (so OTA update can find the right image), but if the enum is available it will be used instead.
     *
     * Generated from protobuf field <code>.HardwareModel hw_model = 5;</code>
     * @return int
     */
    public function getHwModel()
    {
        return $this->hw_model;
    }

    /**
     * TBEAM, HELTEC, etc...
     * Starting in 1.2.11 moved to hw_model enum in the NodeInfo object.
     * Apps will still need the string here for older builds
     * (so OTA update can find the right image), but if the enum is available it will be used instead.
     *
     * Generated from protobuf field <code>.HardwareModel hw_model = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setHwModel($var)
    {
        GPBUtil::checkEnum($var, \HardwareModel::class);
        $this->hw_model = $var;

        return $this;
    }

    /**
     * In some regions Ham radio operators have different bandwidth limitations than others.
     * If this user is a licensed operator, set this flag.
     * Also, "long_name" should be their licence number.
     *
     * Generated from protobuf field <code>bool is_licensed = 6;</code>
     * @return bool
     */
    public function getIsLicensed()
    {
        return $this->is_licensed;
    }

    /**
     * In some regions Ham radio operators have different bandwidth limitations than others.
     * If this user is a licensed operator, set this flag.
     * Also, "long_name" should be their licence number.
     *
     * Generated from protobuf field <code>bool is_licensed = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsLicensed($var)
    {
        GPBUtil::checkBool($var);
        $this->is_licensed = $var;

        return $this;
    }

}

